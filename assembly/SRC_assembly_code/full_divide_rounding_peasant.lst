(SRCTools Version 3.1.1)
 HexLoc     DecLoc    MachWord   Label        Instruction                Comment
                                                                         ;r29 is for the brl return address
                                                                         
00000000  0000000000  2fc0005c                la r31, mult               ;multiply subroutine jump location
00000004  0000000004  2f80002c                la r30, div                ;divide subroutine jump location
00000008  0000000008  2f0003f0                la r28, quotient           ;location where quotient will be stored
0000000c  0000000012  2ec000a0                la r27, end                
00000010  0000000016  2e800080                la r26, evenDivide         ;if remainder is zero, division was even, store number and stop
00000014  0000000020  2e400088                la r25, round              ;rounding branch location
00000018  0000000024  2e000068                la r24, even               
                                                                         
                                                                         
                                iter:         .equ 50                    ;number of digits to calculate out
                                                                         
0000001c  0000000028  29400032                la r5, iter                
                                                                         ;la r4,10		;10 factor for digit shift
                                                                         
                                                                         
                                                                         ;355/113 gives an approximation of pi
00000020  0000000032  28000163                la r0, 355                 ;dividend
00000024  0000000036  28400071                la r1, 113                 ;divisor
                                                                         
                                                                         
00000028  0000000040  28c1fffc                la r3, -4                  
                                                                         
0000002c  0000000044  70001000  div:          sub r0, r0, r1             ;subtract divisor from dividend
00000030  0000000048  68840001                addi r2, r2, 1             ;increment quotient
                                                                         
00000034  0000000052  403c0004                brpl r30, r0               ;keep subtracting until number is negative
                                                                         
                                                                         
00000038  0000000056  6885ffff                addi r2, r2, -1            ;we went past the right quotient, backup 1
0000003c  0000000060  60001000                add r0, r0, r1             ;backup 1
                                                                         
                                                                         
00000040  0000000064  68c60004                addi r3, r3, 4             ;increment quotient storage location
00000044  0000000068  694bffff                addi r5, r5, -1            ;decrement decimal place counter
00000048  0000000072  40325005                brmi r25, r5               ;if we have done all the decimal places we need to do, go to rounding
                                                                         
0000004c  0000000076  40340002                brzr r26, r0               ;jump if there is no remainder
                                                                         
                                                                         
                                                                         
                                                                         
00000050  0000000080  188603f0                st r2, quotient(r3)        ;store current quotient result in memory
                                                                         
                                                                         
                                                                         
00000054  0000000084  28800000                la r2, 0                   ;clear r2
                                                                         
                                                                         
                                                                         
                                                                         
                                                                         ;multiply r0 and r4, result goes in r0
                                                                         
00000058  0000000088  2900000a                la r4, 10                  ;load 10 for digit shift
                                                                         
                                                                         
0000005c  0000000092  a9c80001  mult:         andi r7, r4, 1             ;is odd?
00000060  0000000096  40307002                brzr r24, r7               
00000064  0000000100  60840000                add r2, r2, r0             ;it is odd, add to sum
00000068  0000000104  d1080001  even:         shr r4, r4, 1              ;interger half number
0000006c  0000000108  e0000001                shl r0, r0, 1              ;double number
00000070  0000000112  403e4003                brnz r31, r4               ;if number is not zero we are not done yet
                                                                         
                                                                         
00000074  0000000116  68040000                addi r0, r2, 0             ;put result into r0 for next division
00000078  0000000120  28800000                la r2, 0                   ;clear r2
0000007c  0000000124  403c0001                br r30                     
                                                                         
                                                                         
                                                                         
                                                                         
00000080  0000000128            evenDivide:                              
00000080  0000000128  188603f0                st r2, quotient(r3)        ;store current quotient result in memory
00000084  0000000132  40360001                br r27                     ;we are done, go to end
                                                                         
00000088  0000000136  68c7fffc  round:        addi r3, r3, -4            ;go back one memory address, this is where we want to store rounded value
0000008c  0000000140  6885fffb                addi r2, r2, -5            ;check if number is less than five
00000090  0000000144  40362005                brmi r27, r2               ;branch to end if number is less than five
00000094  0000000148  098603f0                ld r6, quotient(r3)        ;number is greater than 5, so round up
00000098  0000000152  698c0001                addi r6, r6, 1             ;add 1 to number
0000009c  0000000156  198603f0                st r6, quotient(r3)        ;store rounded number
                                                                         
000000a0  0000000160  f8000000  end:          stop                       
                                                                         
                                                                         
                                                                         
                                              .org 1008                  
000003f0  0000001008            quotient:     .dw 1                      

--- Symbol Table ---
end: 160
iter: 50
round: 136
quotient: 1008
evenDivide: 128
mult: 92
even: 104
div: 44
