(SRCTools Version 3.1.1)
 HexLoc     DecLoc    MachWord   Label        Instruction                Comment
                                                                         
00000000  0000000000  2f8000d4                la r30, zeroes             
00000004  0000000004  2f4007d0                la r29, primes             
00000008  0000000008  2f000028                la r28, enum               
0000000c  0000000012  2ec0007c                la r27, elim               
00000010  0000000016  2e800054                la r26, new                
00000014  0000000020  2e400088                la r25, loop               
00000018  0000000024  2e000088                la r24, fac                
0000001c  0000000028  2dc00040                la r23, maxaddr            
                                                                         
                                number:       .equ 100                   ;max number put into sieve
                                                                         
                                                                         
00000020  0000000032  28000064                la r0, number              
00000024  0000000036  28400001                la r1, 1                   ;starting at 2
00000028  0000000040  68420001  enum:         addi r1, r1, 1             
0000002c  0000000044  184407d0                st r1, 2000(r2)            
00000030  0000000048  68840004                addi r2, r2, 4             
00000034  0000000052  70c01000                sub r3, r0, r1             
00000038  0000000056  40383003                brnz r28, r3               
                                                                         
0000003c  0000000060  2a000004                la r8, 4                   ;calculate max address of array of numbers (number * 4)
00000040  0000000064  64200000  maxaddr:      add r16, r16, r0           
00000044  0000000068  6a11ffff                addi r8, r8, -1            
00000048  0000000072  402e8003                brnz r23, r8               
                                                                         
                                                                         
                                                                         
                                                                         
                                                                         
                                                                         
0000004c  0000000076  2a01fffc                la r8, -4                  
00000050  0000000080  28400001                la r1, 1                   
                                                                         
00000054  0000000084  2a400000  new:          la r9, 0                   
00000058  0000000088  2ac00000                la r11, 0                  
0000005c  0000000092  28400001                la r1, 1                   
00000060  0000000096  6a100004                addi r8, r8, 4             
00000064  0000000100  091007d0                ld r4, 2000(r8)            
00000068  0000000104  75100000                sub r20, r8, r0            
0000006c  0000000108  403d4004                brpl r30, r20              
00000070  0000000112  40344002                brzr r26, r4               ;if the number in memory is 0, we can skip it, load another memory address over
                                                                         
00000074  0000000116  62d68000                add r11, r11, r8           
                                                                         
                                                                         
00000078  0000000120  29400004                la r5, 4                   ;multiplier for memory location
                                                                         
0000007c  0000000124  62524000  elim:         add r9, r9, r4             
00000080  0000000128  694bffff                addi r5, r5, -1            
00000084  0000000132  40365003                brnz r27, r5               
                                                                         
00000088  0000000136            fac:                                     ;addi	r10,r1,0		;copy current multiple (r2)
00000088  0000000136  62d69000  loop:         add r11, r11, r9           
                                                                         ;addi	r10,r10,-1
                                                                         ;brnz	r25,r10
                                                                         
                                                                         
0000008c  0000000140  0b1607d0                ld r12, 2000(r11)          ;read value to check if it is higher than number
00000090  0000000144  1d9607d0                st r22, 2000(r11)          ;write a zero to this number, it is a multiple of current number
00000094  0000000148  73570000                sub r13, r11, r16          
00000098  0000000152  4034d004                brpl r26, r13              ;if the value is bigger than max number, pick next number
0000009c  0000000156  68420001                addi r1, r1, 1             ;increment multiple to remove
                                                                         ;la	r11,0		;clear current address
000000a0  0000000160  40300001                br r24                     
                                                                         
                                                                         
                                                                         
                                                                         
                                              .org 212                   
000000d4  0000000212  2fc000e4  zeroes:       la r31, loop2              
000000d8  0000000216  2f4000f4                la r29, loop3              
000000dc  0000000220  2f000114                la r28, end                
000000e0  0000000224  2841fffc                la r1, -4                  
                                                                         
000000e4  0000000228  68420004  loop2:        addi r1, r1, 4             ;r1 will keep the location of the spot for the next number to be moved
000000e8  0000000232  090207d0                ld r4, 2000(r1)            
000000ec  0000000236  403e4003                brnz r31, r4               
                                                                         
000000f0  0000000240  68820000                addi r2, r1, 0             
000000f4  0000000244  68840004  loop3:        addi r2, r2, 4             
000000f8  0000000248  71850000                sub r6, r2, r16            
000000fc  0000000252  40386004                brpl r28, r6               
00000100  0000000256  094407d0                ld r5, 2000(r2)            
00000104  0000000260  403a5002                brzr r29, r5               ;keep moving forward until we hit a number, while keeping track of zeroes
00000108  0000000264  194207d0                st r5, 2000(r1)            
0000010c  0000000268  190407d0                st r4, 2000(r2)            
00000110  0000000272  403e0001                br r31                     
                                                                         
                                                                         
00000114  0000000276  f8000000  end:          stop                       
                                                                         
                                                                         
                                              .org 2000                  
000007d0  0000002000            primes:       .dw number                 

--- Symbol Table ---
enum: 40
fac: 136
maxaddr: 64
end: 276
number: 100
loop: 136
primes: 2000
loop3: 244
new: 84
loop2: 228
zeroes: 212
elim: 124
